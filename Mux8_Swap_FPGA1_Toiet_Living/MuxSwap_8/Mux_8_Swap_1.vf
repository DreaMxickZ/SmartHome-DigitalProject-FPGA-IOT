////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Mux_8_Swap_1.vf
// /___/   /\     Timestamp : 12/09/2022 22:37:57
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Users/XickZenF5/Desktop/Mux8_Swap/MuxSwap_8/Mux_8_Swap_1.vf -w C:/Users/XickZenF5/Desktop/Mux8_Swap/MuxSwap_8/Mux_8_Swap_1.sch
//Design Name: Mux_8_Swap_1
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module M8_1E_HXILINX_Mux_8_Swap_1 (O, D0, D1, D2, D3, D4, D5, D6, D7, E, S0, S1, S2);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  D4;
   input  D5;
   input  D6;
   input  D7;
   input  E;
   input  S0;
   input  S1;
   input  S2;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or D4 or D5 or D6 or D7 or E or S0 or S1 or S2)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S2,S1,S0})
        3'b000 : O <= D0;
        3'b001 : O <= D1;
        3'b010 : O <= D2;
        3'b011 : O <= D3;
        3'b100 : O <= D4;
        3'b101 : O <= D5;
        3'b110 : O <= D6;
        3'b111 : O <= D7;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module INV4_HXILINX_Mux_8_Swap_1 (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_Mux_8_Swap_1(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_Mux_8_Swap_1 (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_Mux_8_Swap_1(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 1ns / 1ps

module Counter0_7_MUSER_Mux_8_Swap_1(CLK_IN, 
                                     CLR_IN, 
                                     BIT_OUT);

    input CLK_IN;
    input CLR_IN;
   output [2:0] BIT_OUT;
   
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_11;
   wire XLXN_14;
   
   (* HU_SET = "XLXI_1_0" *) 
   CD4CE_HXILINX_Mux_8_Swap_1  XLXI_1 (.C(XLXN_8), 
                                      .CE(XLXN_7), 
                                      .CLR(XLXN_11), 
                                      .CEO(), 
                                      .Q0(BIT_OUT[0]), 
                                      .Q1(BIT_OUT[1]), 
                                      .Q2(BIT_OUT[2]), 
                                      .Q3(XLXN_14), 
                                      .TC());
   VCC  XLXI_2 (.P(XLXN_7));
   AND2  XLXI_3 (.I0(CLK_IN), 
                .I1(XLXN_9), 
                .O(XLXN_8));
   VCC  XLXI_4 (.P(XLXN_9));
   OR2  XLXI_5 (.I0(XLXN_14), 
               .I1(CLR_IN), 
               .O(XLXN_11));
endmodule
`timescale 1ns / 1ps

module MixBus16_4_MUSER_Mux_8_Swap_1(BIT, 
                                     A, 
                                     B, 
                                     C, 
                                     D);

    input [15:0] BIT;
   output [3:0] A;
   output [3:0] B;
   output [3:0] C;
   output [3:0] D;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   
   (* HU_SET = "XLXI_1_1" *) 
   INV4_HXILINX_Mux_8_Swap_1  XLXI_1 (.I0(BIT[3]), 
                                     .I1(BIT[2]), 
                                     .I2(BIT[1]), 
                                     .I3(BIT[0]), 
                                     .O0(XLXN_1), 
                                     .O1(XLXN_2), 
                                     .O2(XLXN_3), 
                                     .O3(XLXN_4));
   (* HU_SET = "XLXI_2_2" *) 
   INV4_HXILINX_Mux_8_Swap_1  XLXI_2 (.I0(BIT[7]), 
                                     .I1(BIT[6]), 
                                     .I2(BIT[5]), 
                                     .I3(BIT[4]), 
                                     .O0(XLXN_5), 
                                     .O1(XLXN_6), 
                                     .O2(XLXN_7), 
                                     .O3(XLXN_8));
   (* HU_SET = "XLXI_3_3" *) 
   INV4_HXILINX_Mux_8_Swap_1  XLXI_3 (.I0(XLXN_1), 
                                     .I1(XLXN_2), 
                                     .I2(XLXN_3), 
                                     .I3(XLXN_4), 
                                     .O0(A[3]), 
                                     .O1(A[2]), 
                                     .O2(A[1]), 
                                     .O3(A[0]));
   (* HU_SET = "XLXI_4_4" *) 
   INV4_HXILINX_Mux_8_Swap_1  XLXI_4 (.I0(XLXN_5), 
                                     .I1(XLXN_6), 
                                     .I2(XLXN_7), 
                                     .I3(XLXN_8), 
                                     .O0(B[3]), 
                                     .O1(B[2]), 
                                     .O2(B[1]), 
                                     .O3(B[0]));
   (* HU_SET = "XLXI_5_5" *) 
   INV4_HXILINX_Mux_8_Swap_1  XLXI_5 (.I0(BIT[11]), 
                                     .I1(BIT[10]), 
                                     .I2(BIT[9]), 
                                     .I3(BIT[8]), 
                                     .O0(XLXN_28), 
                                     .O1(XLXN_27), 
                                     .O2(XLXN_26), 
                                     .O3(XLXN_25));
   (* HU_SET = "XLXI_6_6" *) 
   INV4_HXILINX_Mux_8_Swap_1  XLXI_6 (.I0(XLXN_28), 
                                     .I1(XLXN_27), 
                                     .I2(XLXN_26), 
                                     .I3(XLXN_25), 
                                     .O0(C[3]), 
                                     .O1(C[2]), 
                                     .O2(C[1]), 
                                     .O3(C[0]));
   (* HU_SET = "XLXI_7_7" *) 
   INV4_HXILINX_Mux_8_Swap_1  XLXI_7 (.I0(BIT[15]), 
                                     .I1(BIT[14]), 
                                     .I2(BIT[13]), 
                                     .I3(BIT[12]), 
                                     .O0(XLXN_32), 
                                     .O1(XLXN_31), 
                                     .O2(XLXN_30), 
                                     .O3(XLXN_29));
   (* HU_SET = "XLXI_8_8" *) 
   INV4_HXILINX_Mux_8_Swap_1  XLXI_8 (.I0(XLXN_32), 
                                     .I1(XLXN_31), 
                                     .I2(XLXN_30), 
                                     .I3(XLXN_29), 
                                     .O0(D[3]), 
                                     .O1(D[2]), 
                                     .O2(D[1]), 
                                     .O3(D[0]));
endmodule
`timescale 1ns / 1ps

module Mux8_Swap_8_MUSER_Mux_8_Swap_1(IN_1, 
                                      IN_2, 
                                      IN_3, 
                                      IN_4, 
                                      IN_5, 
                                      IN_6, 
                                      IN_7, 
                                      IN_8, 
                                      Select_LED, 
                                      BIT_OUT_MUX_8);

    input [3:0] IN_1;
    input [3:0] IN_2;
    input [3:0] IN_3;
    input [3:0] IN_4;
    input [3:0] IN_5;
    input [3:0] IN_6;
    input [3:0] IN_7;
    input [3:0] IN_8;
    input [2:0] Select_LED;
   output [3:0] BIT_OUT_MUX_8;
   
   wire XLXN_50;
   
   (* HU_SET = "XLXI_5_9" *) 
   M8_1E_HXILINX_Mux_8_Swap_1  XLXI_5 (.D0(IN_1[0]), 
                                      .D1(IN_2[0]), 
                                      .D2(IN_3[0]), 
                                      .D3(IN_4[0]), 
                                      .D4(IN_5[0]), 
                                      .D5(IN_6[0]), 
                                      .D6(IN_7[0]), 
                                      .D7(IN_8[0]), 
                                      .E(XLXN_50), 
                                      .S0(Select_LED[0]), 
                                      .S1(Select_LED[1]), 
                                      .S2(Select_LED[2]), 
                                      .O(BIT_OUT_MUX_8[0]));
   (* HU_SET = "XLXI_6_10" *) 
   M8_1E_HXILINX_Mux_8_Swap_1  XLXI_6 (.D0(IN_1[1]), 
                                      .D1(IN_2[1]), 
                                      .D2(IN_3[1]), 
                                      .D3(IN_4[1]), 
                                      .D4(IN_5[1]), 
                                      .D5(IN_6[1]), 
                                      .D6(IN_7[1]), 
                                      .D7(IN_8[1]), 
                                      .E(XLXN_50), 
                                      .S0(Select_LED[0]), 
                                      .S1(Select_LED[1]), 
                                      .S2(Select_LED[2]), 
                                      .O(BIT_OUT_MUX_8[1]));
   (* HU_SET = "XLXI_7_11" *) 
   M8_1E_HXILINX_Mux_8_Swap_1  XLXI_7 (.D0(IN_1[2]), 
                                      .D1(IN_2[2]), 
                                      .D2(IN_3[2]), 
                                      .D3(IN_4[2]), 
                                      .D4(IN_5[2]), 
                                      .D5(IN_6[2]), 
                                      .D6(IN_7[2]), 
                                      .D7(IN_8[2]), 
                                      .E(XLXN_50), 
                                      .S0(Select_LED[0]), 
                                      .S1(Select_LED[1]), 
                                      .S2(Select_LED[2]), 
                                      .O(BIT_OUT_MUX_8[2]));
   (* HU_SET = "XLXI_8_12" *) 
   M8_1E_HXILINX_Mux_8_Swap_1  XLXI_8 (.D0(IN_1[3]), 
                                      .D1(IN_2[3]), 
                                      .D2(IN_3[3]), 
                                      .D3(IN_4[3]), 
                                      .D4(IN_5[3]), 
                                      .D5(IN_6[3]), 
                                      .D6(IN_7[3]), 
                                      .D7(IN_8[3]), 
                                      .E(XLXN_50), 
                                      .S0(Select_LED[0]), 
                                      .S1(Select_LED[1]), 
                                      .S2(Select_LED[2]), 
                                      .O(BIT_OUT_MUX_8[3]));
   VCC  XLXI_17 (.P(XLXN_50));
endmodule
`timescale 1ns / 1ps

module counter03_MUSER_Mux_8_Swap_1(CLK_IN, 
                                    CLR_IN, 
                                    BIT);

    input CLK_IN;
    input CLR_IN;
   output [1:0] BIT;
   
   wire XLXN_1;
   wire XLXN_6;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_15;
   wire XLXN_16;
   wire [1:0] BIT_DUMMY;
   
   assign BIT[1:0] = BIT_DUMMY[1:0];
   (* HU_SET = "XLXI_1_13" *) 
   FJKC_HXILINX_Mux_8_Swap_1  XLXI_1 (.C(XLXN_10), 
                                     .CLR(XLXN_11), 
                                     .J(XLXN_1), 
                                     .K(XLXN_1), 
                                     .Q(BIT_DUMMY[0]));
   (* HU_SET = "XLXI_2_14" *) 
   FJKC_HXILINX_Mux_8_Swap_1  XLXI_2 (.C(XLXN_10), 
                                     .CLR(XLXN_11), 
                                     .J(BIT_DUMMY[0]), 
                                     .K(BIT_DUMMY[0]), 
                                     .Q(BIT_DUMMY[1]));
   (* HU_SET = "XLXI_3_15" *) 
   FJKC_HXILINX_Mux_8_Swap_1  XLXI_3 (.C(XLXN_10), 
                                     .CLR(XLXN_11), 
                                     .J(XLXN_6), 
                                     .K(XLXN_6), 
                                     .Q(XLXN_15));
   VCC  XLXI_4 (.P(XLXN_1));
   AND2  XLXI_5 (.I0(BIT_DUMMY[1]), 
                .I1(BIT_DUMMY[0]), 
                .O(XLXN_6));
   AND2  XLXI_6 (.I0(CLK_IN), 
                .I1(XLXN_16), 
                .O(XLXN_10));
   OR2  XLXI_7 (.I0(XLXN_15), 
               .I1(CLR_IN), 
               .O(XLXN_11));
   VCC  XLXI_8 (.P(XLXN_16));
endmodule
`timescale 1ns / 1ps

module Mux4_Swap_LED_MUSER_Mux_8_Swap_1(BIT_0_3, 
                                        BIT_4_7, 
                                        BIT_8_11, 
                                        BIT_12_15, 
                                        CLK_LED, 
                                        CLR_clk_Mux, 
                                        BIT_A_LSB, 
                                        BIT_B, 
                                        BIT_C, 
                                        BIT_D_MSB, 
                                        XLXN_71);

    input [3:0] BIT_0_3;
    input [3:0] BIT_4_7;
    input [3:0] BIT_8_11;
    input [3:0] BIT_12_15;
    input CLK_LED;
    input CLR_clk_Mux;
   output BIT_A_LSB;
   output BIT_B;
   output BIT_C;
   output BIT_D_MSB;
   output [1:0] XLXN_71;
   
   wire XLXN_12;
   wire [1:0] XLXN_71_DUMMY;
   
   assign XLXN_71[1:0] = XLXN_71_DUMMY[1:0];
   (* HU_SET = "XLXI_1_16" *) 
   M4_1E_HXILINX_Mux_8_Swap_1  XLXI_1 (.D0(BIT_0_3[0]), 
                                      .D1(BIT_4_7[0]), 
                                      .D2(BIT_8_11[0]), 
                                      .D3(BIT_12_15[0]), 
                                      .E(XLXN_12), 
                                      .S0(XLXN_71_DUMMY[0]), 
                                      .S1(XLXN_71_DUMMY[1]), 
                                      .O(BIT_A_LSB));
   (* HU_SET = "XLXI_2_17" *) 
   M4_1E_HXILINX_Mux_8_Swap_1  XLXI_2 (.D0(BIT_0_3[1]), 
                                      .D1(BIT_4_7[1]), 
                                      .D2(BIT_8_11[1]), 
                                      .D3(BIT_12_15[1]), 
                                      .E(XLXN_12), 
                                      .S0(XLXN_71_DUMMY[0]), 
                                      .S1(XLXN_71_DUMMY[1]), 
                                      .O(BIT_B));
   (* HU_SET = "XLXI_3_18" *) 
   M4_1E_HXILINX_Mux_8_Swap_1  XLXI_3 (.D0(BIT_0_3[2]), 
                                      .D1(BIT_4_7[2]), 
                                      .D2(BIT_8_11[2]), 
                                      .D3(BIT_12_15[2]), 
                                      .E(XLXN_12), 
                                      .S0(XLXN_71_DUMMY[0]), 
                                      .S1(XLXN_71_DUMMY[1]), 
                                      .O(BIT_C));
   (* HU_SET = "XLXI_4_19" *) 
   M4_1E_HXILINX_Mux_8_Swap_1  XLXI_4 (.D0(BIT_0_3[3]), 
                                      .D1(BIT_4_7[3]), 
                                      .D2(BIT_8_11[3]), 
                                      .D3(BIT_12_15[3]), 
                                      .E(XLXN_12), 
                                      .S0(XLXN_71_DUMMY[0]), 
                                      .S1(XLXN_71_DUMMY[1]), 
                                      .O(BIT_D_MSB));
   counter03_MUSER_Mux_8_Swap_1  XLXI_9 (.CLK_IN(CLK_LED), 
                                        .CLR_IN(CLR_clk_Mux), 
                                        .BIT(XLXN_71_DUMMY[1:0]));
   VCC  XLXI_10 (.P(XLXN_12));
endmodule
`timescale 1ns / 1ps

module Mux_8_Swap_1(CLK_IN_LED, 
                    CLR_clk, 
                    IN_16BIT_1, 
                    IN_16BIT_2, 
                    IN_16BIT_3, 
                    IN_16BIT_4, 
                    IN_16BIT_5, 
                    IN_16BIT_6, 
                    IN_16BIT_7, 
                    IN_16BIT_8, 
                    Select_LED, 
                    A_LSB, 
                    B, 
                    C, 
                    CLK_LED_TO_COMMON, 
                    D_MSB);

    input CLK_IN_LED;
    input CLR_clk;
    input [15:0] IN_16BIT_1;
    input [15:0] IN_16BIT_2;
    input [15:0] IN_16BIT_3;
    input [15:0] IN_16BIT_4;
    input [15:0] IN_16BIT_5;
    input [15:0] IN_16BIT_6;
    input [15:0] IN_16BIT_7;
    input [15:0] IN_16BIT_8;
    input Select_LED;
   output A_LSB;
   output B;
   output C;
   output [1:0] CLK_LED_TO_COMMON;
   output D_MSB;
   
   wire [3:0] XLXN_1;
   wire [3:0] XLXN_2;
   wire [3:0] XLXN_3;
   wire [3:0] XLXN_4;
   wire [2:0] XLXN_8;
   wire [3:0] XLXN_67;
   wire [3:0] XLXN_68;
   wire [3:0] XLXN_69;
   wire [3:0] XLXN_70;
   wire [3:0] XLXN_71;
   wire [3:0] XLXN_72;
   wire [3:0] XLXN_73;
   wire [3:0] XLXN_74;
   wire [3:0] XLXN_75;
   wire [3:0] XLXN_76;
   wire [3:0] XLXN_78;
   wire [3:0] XLXN_79;
   wire [3:0] XLXN_80;
   wire [3:0] XLXN_81;
   wire [3:0] XLXN_82;
   wire [3:0] XLXN_83;
   wire [3:0] XLXN_84;
   wire [3:0] XLXN_85;
   wire [3:0] XLXN_86;
   wire [3:0] XLXN_87;
   wire [3:0] XLXN_88;
   wire [3:0] XLXN_89;
   wire [3:0] XLXN_90;
   wire [3:0] XLXN_91;
   wire [3:0] XLXN_92;
   wire [3:0] XLXN_93;
   wire [3:0] XLXN_94;
   wire [3:0] XLXN_95;
   wire [3:0] XLXN_96;
   wire [3:0] XLXN_97;
   wire [3:0] XLXN_98;
   wire [3:0] XLXN_99;
   
   Mux8_Swap_8_MUSER_Mux_8_Swap_1  XLXI_1 (.IN_1(XLXN_67[3:0]), 
                                          .IN_2(XLXN_71[3:0]), 
                                          .IN_3(XLXN_72[3:0]), 
                                          .IN_4(XLXN_73[3:0]), 
                                          .IN_5(XLXN_74[3:0]), 
                                          .IN_6(XLXN_75[3:0]), 
                                          .IN_7(XLXN_76[3:0]), 
                                          .IN_8(XLXN_78[3:0]), 
                                          .Select_LED(XLXN_8[2:0]), 
                                          .BIT_OUT_MUX_8(XLXN_1[3:0]));
   Mux8_Swap_8_MUSER_Mux_8_Swap_1  XLXI_2 (.IN_1(XLXN_68[3:0]), 
                                          .IN_2(XLXN_79[3:0]), 
                                          .IN_3(XLXN_80[3:0]), 
                                          .IN_4(XLXN_81[3:0]), 
                                          .IN_5(XLXN_82[3:0]), 
                                          .IN_6(XLXN_83[3:0]), 
                                          .IN_7(XLXN_84[3:0]), 
                                          .IN_8(XLXN_85[3:0]), 
                                          .Select_LED(XLXN_8[2:0]), 
                                          .BIT_OUT_MUX_8(XLXN_2[3:0]));
   Mux8_Swap_8_MUSER_Mux_8_Swap_1  XLXI_3 (.IN_1(XLXN_69[3:0]), 
                                          .IN_2(XLXN_86[3:0]), 
                                          .IN_3(XLXN_87[3:0]), 
                                          .IN_4(XLXN_88[3:0]), 
                                          .IN_5(XLXN_89[3:0]), 
                                          .IN_6(XLXN_90[3:0]), 
                                          .IN_7(XLXN_91[3:0]), 
                                          .IN_8(XLXN_92[3:0]), 
                                          .Select_LED(XLXN_8[2:0]), 
                                          .BIT_OUT_MUX_8(XLXN_3[3:0]));
   Mux8_Swap_8_MUSER_Mux_8_Swap_1  XLXI_4 (.IN_1(XLXN_70[3:0]), 
                                          .IN_2(XLXN_93[3:0]), 
                                          .IN_3(XLXN_94[3:0]), 
                                          .IN_4(XLXN_95[3:0]), 
                                          .IN_5(XLXN_96[3:0]), 
                                          .IN_6(XLXN_97[3:0]), 
                                          .IN_7(XLXN_98[3:0]), 
                                          .IN_8(XLXN_99[3:0]), 
                                          .Select_LED(XLXN_8[2:0]), 
                                          .BIT_OUT_MUX_8(XLXN_4[3:0]));
   Mux4_Swap_LED_MUSER_Mux_8_Swap_1  XLXI_11 (.BIT_0_3(XLXN_1[3:0]), 
                                             .BIT_4_7(XLXN_2[3:0]), 
                                             .BIT_8_11(XLXN_3[3:0]), 
                                             .BIT_12_15(XLXN_4[3:0]), 
                                             .CLK_LED(CLK_IN_LED), 
                                             .CLR_clk_Mux(CLR_clk), 
                                             .BIT_A_LSB(A_LSB), 
                                             .BIT_B(B), 
                                             .BIT_C(C), 
                                             .BIT_D_MSB(D_MSB), 
                                             .XLXN_71(CLK_LED_TO_COMMON[1:0]));
   MixBus16_4_MUSER_Mux_8_Swap_1  XLXI_12 (.BIT(IN_16BIT_8[15:0]), 
                                          .A(XLXN_78[3:0]), 
                                          .B(XLXN_85[3:0]), 
                                          .C(XLXN_92[3:0]), 
                                          .D(XLXN_99[3:0]));
   MixBus16_4_MUSER_Mux_8_Swap_1  XLXI_13 (.BIT(IN_16BIT_7[15:0]), 
                                          .A(XLXN_76[3:0]), 
                                          .B(XLXN_84[3:0]), 
                                          .C(XLXN_91[3:0]), 
                                          .D(XLXN_98[3:0]));
   MixBus16_4_MUSER_Mux_8_Swap_1  XLXI_14 (.BIT(IN_16BIT_6[15:0]), 
                                          .A(XLXN_75[3:0]), 
                                          .B(XLXN_83[3:0]), 
                                          .C(XLXN_90[3:0]), 
                                          .D(XLXN_97[3:0]));
   MixBus16_4_MUSER_Mux_8_Swap_1  XLXI_15 (.BIT(IN_16BIT_5[15:0]), 
                                          .A(XLXN_74[3:0]), 
                                          .B(XLXN_82[3:0]), 
                                          .C(XLXN_89[3:0]), 
                                          .D(XLXN_96[3:0]));
   MixBus16_4_MUSER_Mux_8_Swap_1  XLXI_16 (.BIT(IN_16BIT_1[15:0]), 
                                          .A(XLXN_67[3:0]), 
                                          .B(XLXN_68[3:0]), 
                                          .C(XLXN_69[3:0]), 
                                          .D(XLXN_70[3:0]));
   MixBus16_4_MUSER_Mux_8_Swap_1  XLXI_17 (.BIT(IN_16BIT_2[15:0]), 
                                          .A(XLXN_71[3:0]), 
                                          .B(XLXN_79[3:0]), 
                                          .C(XLXN_86[3:0]), 
                                          .D(XLXN_93[3:0]));
   MixBus16_4_MUSER_Mux_8_Swap_1  XLXI_18 (.BIT(IN_16BIT_4[15:0]), 
                                          .A(XLXN_73[3:0]), 
                                          .B(XLXN_81[3:0]), 
                                          .C(XLXN_88[3:0]), 
                                          .D(XLXN_95[3:0]));
   MixBus16_4_MUSER_Mux_8_Swap_1  XLXI_19 (.BIT(IN_16BIT_3[15:0]), 
                                          .A(XLXN_72[3:0]), 
                                          .B(XLXN_80[3:0]), 
                                          .C(XLXN_87[3:0]), 
                                          .D(XLXN_94[3:0]));
   Counter0_7_MUSER_Mux_8_Swap_1  XLXI_76 (.CLK_IN(Select_LED), 
                                          .CLR_IN(CLR_clk), 
                                          .BIT_OUT(XLXN_8[2:0]));
endmodule
