////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Counter0_7.vf
// /___/   /\     Timestamp : 12/09/2022 22:37:59
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Users/XickZenF5/Desktop/Mux8_Swap/MuxSwap_8/Counter0_7.vf -w C:/Users/XickZenF5/Desktop/Mux8_Swap/MuxSwap_8/Counter0_7.sch
//Design Name: Counter0_7
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_Counter0_7(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Counter0_7(CLK_IN, 
                  CLR_IN, 
                  BIT_OUT);

    input CLK_IN;
    input CLR_IN;
   output [2:0] BIT_OUT;
   
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_11;
   wire XLXN_14;
   
   (* HU_SET = "XLXI_1_54" *) 
   CD4CE_HXILINX_Counter0_7  XLXI_1 (.C(XLXN_8), 
                                    .CE(XLXN_7), 
                                    .CLR(XLXN_11), 
                                    .CEO(), 
                                    .Q0(BIT_OUT[0]), 
                                    .Q1(BIT_OUT[1]), 
                                    .Q2(BIT_OUT[2]), 
                                    .Q3(XLXN_14), 
                                    .TC());
   VCC  XLXI_2 (.P(XLXN_7));
   AND2  XLXI_3 (.I0(CLK_IN), 
                .I1(XLXN_9), 
                .O(XLXN_8));
   VCC  XLXI_4 (.P(XLXN_9));
   OR2  XLXI_5 (.I0(XLXN_14), 
               .I1(CLR_IN), 
               .O(XLXN_11));
endmodule
